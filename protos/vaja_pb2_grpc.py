# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vaja_pb2 as vaja__pb2


class VajaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VajaFunc = channel.unary_unary(
                '/vajaPack.VajaService/VajaFunc',
                request_serializer=vaja__pb2.VajaRequest.SerializeToString,
                response_deserializer=vaja__pb2.VajaReply.FromString,
                )
        self.VajaStream = channel.stream_unary(
                '/vajaPack.VajaService/VajaStream',
                request_serializer=vaja__pb2.StreamData.SerializeToString,
                response_deserializer=vaja__pb2.VajaReply.FromString,
                )
        self.VajaBiStream = channel.stream_stream(
                '/vajaPack.VajaService/VajaBiStream',
                request_serializer=vaja__pb2.StreamData.SerializeToString,
                response_deserializer=vaja__pb2.StreamData.FromString,
                )


class VajaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VajaFunc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VajaStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VajaBiStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VajaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VajaFunc': grpc.unary_unary_rpc_method_handler(
                    servicer.VajaFunc,
                    request_deserializer=vaja__pb2.VajaRequest.FromString,
                    response_serializer=vaja__pb2.VajaReply.SerializeToString,
            ),
            'VajaStream': grpc.stream_unary_rpc_method_handler(
                    servicer.VajaStream,
                    request_deserializer=vaja__pb2.StreamData.FromString,
                    response_serializer=vaja__pb2.VajaReply.SerializeToString,
            ),
            'VajaBiStream': grpc.stream_stream_rpc_method_handler(
                    servicer.VajaBiStream,
                    request_deserializer=vaja__pb2.StreamData.FromString,
                    response_serializer=vaja__pb2.StreamData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vajaPack.VajaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VajaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VajaFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vajaPack.VajaService/VajaFunc',
            vaja__pb2.VajaRequest.SerializeToString,
            vaja__pb2.VajaReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VajaStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/vajaPack.VajaService/VajaStream',
            vaja__pb2.StreamData.SerializeToString,
            vaja__pb2.VajaReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VajaBiStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/vajaPack.VajaService/VajaBiStream',
            vaja__pb2.StreamData.SerializeToString,
            vaja__pb2.StreamData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
